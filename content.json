{"meta":{"title":"Diwen's Coding Blog","subtitle":"Coding, Thinking, Blogging","description":null,"author":null,"url":"http://yoursite.com"},"pages":[{"title":"about","date":"2018-05-25T00:25:17.000Z","updated":"2018-05-27T07:07:56.532Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"说点什么Emmmmm… 我花了不少的时间折腾github page和hexo以及这个看上去不错的主题。然后发现不知道该说什么？ 我正在把所有的关于Coding的东西放到Github上面，这绝对是一个麻烦的工作，但看上去却能提高一些学习上的效率。 我的工作绝大部分时间都在Coding，忙碌地完成策划提来的需求，经常需要加班到很晚。所以我还可能写一些吐槽的东西。 学习笔记C++ Primer 5th"}],"posts":[{"title":"阻塞模式与轮询模式","slug":"阻塞模式与轮询模式","date":"2018-05-27T14:28:39.000Z","updated":"2018-05-27T15:04:30.036Z","comments":true,"path":"2018/05/27/阻塞模式与轮询模式/","link":"","permalink":"http://yoursite.com/2018/05/27/阻塞模式与轮询模式/","excerpt":"","text":"在实际编程中，总会遇到一些相似的情况，比如最简单的Hello World程序，程序完成输出的目的后就结束了，这就可以将其总结为一种编程模式：【运行 -&gt; 输出 -&gt; 返回】，在课本的练习中这种模式很常见。 不过，这种模式的功能实在是有限，比如无法交互，无法处理不确定的事件，这往往是业务中所需要的。比如最简单的计算加法的结果，必须要求用户输入运算数字才能够进行计算： 123456789int main()&#123; int a = 0, b = 0; std::cin &gt;&gt; a &gt;&gt; b; printf(\"%d + %d = %d\\n\", a, b, a + b); return 0;&#125; 可以把它总结为一种阻塞式的编程模式，在这种模式下，程序会阻塞等待某些事件，这些事件往往是操作系统控制的。比如在程序等待输入时，通过键入一串内容，然后敲下回车，程序就会从终端读取数据。 但是阻塞模式会遇到一个问题，那就是在阻塞的时候，程序（或者说这个被阻塞的执行线程）什么都做不了。这个时候可以采用轮询的方法，也就是隔一段时间，执行一次处理： 12345678910void loop()&#123; while (true) &#123; // do one thing // do another thing sleep(1); &#125;&#125; 但是要注意的是，轮询中的处理方式都不能是阻塞的，不然就会影响到其他工作的处理了。 操作系统更喜欢阻塞模式的程序，在Linux系统下，这样的程序会被奖励nice值，从而获得更高的响应速度，而且这样的程序消耗的CPU时间也更少。 但我觉得阻塞模式的程序不太好设计，因为它更多的涉及到操作系统层面，比如从终端读取输入、进程挂起（pause）、线程锁、socket接受连接等，阻塞的来源和处理的方法都不一样。而轮询的模式仅涉及到像sleep（或者usleep）这样的比较简单的函数，在实际编程中看上去更简洁。","categories":[{"name":"C++随笔","slug":"C-随笔","permalink":"http://yoursite.com/categories/C-随笔/"}],"tags":[]},{"title":"VirtualBox安装CentOS7及其相关配置","slug":"VirtualBox安装CentOS7及其相关配置","date":"2018-05-27T09:22:10.000Z","updated":"2018-05-27T09:29:43.767Z","comments":true,"path":"2018/05/27/VirtualBox安装CentOS7及其相关配置/","link":"","permalink":"http://yoursite.com/2018/05/27/VirtualBox安装CentOS7及其相关配置/","excerpt":"","text":"安装准备 VirtualBox我是在电脑管家应用中心下载的，是一个免费的虚拟机软件 CentOS 7的镜像我是在CentOS官方网站下载的，DVD ISO版本，也可以直接在这里找：下载地址 VirtualBox安装默认步骤就可以安装了。 CentOS 7安装 打开VirtualBox，点击新建（ctrl + n） 填写如下配置： 接下来是配置设置，保持默认选项就可以了，创建成功。 点击启动，首次启动会选择一个启动盘，选择CentOS 7的镜像文件启动 选择Install CentOS后就进入到图形界面安装了，根据提示来Continue就可以了，只有一步需要注意，就是安装Software Selection不要保持默认，选择Infrastructure Server，把右边的选项都勾起来，如下： 然后等待安装成功就可以了。这是一个无图形界面的版本。 相关配置网络设置目标是通过SecureCRT来连接虚拟机，步骤是： 用root登陆后，输入dhclient，获取一个虚拟机IP 右键虚拟机，选择设置（ctrl + s） –&gt; 网络，连接方式选择网络地址转换（NAT），高级 –&gt; 端口转发，添加一个端口转发，主机IP是本机IP，端口号自定义，但要记住，以后SecureCRT连的就是这个IP和端口；子系统IP是虚拟机IP，端口是22，如图： 这里是说明，连接本机的192.168.11.214:9988，就相当于连接虚拟机的10.0.2.15:22 然后使用SecureCRT连接就可以了，但这里有一个问题，每次重启都要输入dhclient来分配一个ip，解决方法是： 编辑文件vim /etc/sysconfig/network-scripts/ifcfg-enp0s3，将NOBOOT的值改成yes。（虽然我不清楚为什么，但这样做就可以） 共享本机硬盘目标是共享主机上的某一个目录或磁盘，这样就可以方便的进行开发了（本机开发，虚拟机运行）。步骤是： 点击虚拟机运行窗口 –&gt; 设备 –&gt; 安装增强功能 挂载光盘并安装相关文件： 123mount /dev/cdrom /mediacd /media./VBoxLinuxAdditions.run ctrl + s 打开虚拟机设置 –&gt; 共享文件夹，添加一个本地共享目录，比如是ldw_share，自动挂载，固定分配，如： 在虚拟机里创建一个目录，可以命名为ldw_share，然后输入命令： 12mkdir ldw_sharemount -t vboxsf ldw_share ldw_share # 第一个ldw_share是本机共享目录的共享名（如上），第二个ldw_share是虚拟机的共享目录名 即挂载成功。 修改系统时间默认情况下系统时间不是CST时间（中国上海），输入如下命令设置： 12rm -rf /etc/localtimeln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 修改环境变量PS1PS1代表命令提示符，将其追加到/etc/.bash_profile： 1PS1=\"[\\[\\e[36;1m\\]\\u@\\[\\e[32;1m\\]LDW\\[\\e[31;1m\\] \\t \\[\\e[36;1m\\]\\w\\[\\e[0m\\]]# \" 安装lrzsz工具设置共享目录可以达到本机-虚拟机传送文件的目的，然而我觉得更方便的办法是使用lrzsz工具。 直接输入命令即可安装： 1yum install lrzsz","categories":[],"tags":[]},{"title":"C++显式转换和C语言的强制类型转换之间的区别","slug":"C-显式转换和C语言的强制类型转换之间的区别","date":"2018-05-27T06:25:38.000Z","updated":"2018-05-27T15:06:07.691Z","comments":true,"path":"2018/05/27/C-显式转换和C语言的强制类型转换之间的区别/","link":"","permalink":"http://yoursite.com/2018/05/27/C-显式转换和C语言的强制类型转换之间的区别/","excerpt":"","text":"C语言的强制类型转换的功能更通用，即它具有static_cast, const_cast和reinterpret_cast相似的行为。 关于显式类型转换： static_cast只能应用于明确定义了的类型转换，并且不能用于底层const（lower const）的转换。 const_cast只能改变底层const reinterpret_cast通常用于重新解释一个指针类型，使用需小心。 C语言的强制类型转换没有细分的这么明显，它拥有了这三者的功能。 见代码： 123456789101112131415int a = 0;int *pa = &amp;a; const int *cpa = &amp;a; //static_cast&lt;int*&gt;(cpa); // invalid static_cast from type ‘const int*’ to type ‘int*’//static_cast&lt;char*&gt;(pa); // invalid static_cast from type ‘int*’ to type ‘char*’const_cast&lt;int*&gt;(cpa); // OKreinterpret_cast&lt;char*&gt;(pa);// OK(int*)cpa; // OK(char*)pa; // OKreturn 0;","categories":[{"name":"C++随笔","slug":"C-随笔","permalink":"http://yoursite.com/categories/C-随笔/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://yoursite.com/tags/C/"}]},{"title":"Blogging by Hexo","slug":"Blogging-by-Hexo","date":"2018-05-24T20:52:09.000Z","updated":"2018-05-27T06:37:00.148Z","comments":true,"path":"2018/05/24/Blogging-by-Hexo/","link":"","permalink":"http://yoursite.com/2018/05/24/Blogging-by-Hexo/","excerpt":"","text":"环境：CentOS 7 安装Node.js12345$ wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash$ nvm install stable$ npm install -g hexo-cli 启动Hexo1234$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install$ hexo server 配置修改_config.yml文件。 写作创建新文章： 1$ hexo new &lt;title&gt; 创建新页面： 1$ hexo new page &lt;page_name&gt; 部署到Github Page安装hexo-deployer-git: 1$ npm install hexo-deployer-git --save 修改配置文件_config.yml: 123deploy: type: git repo: git@github.com:demon90s/demon90s.github.io.git 部署命令： 1$ hexo deploy 选择主题see: https://github.com/iTimeTraveler/hexo-theme-hiker","categories":[],"tags":[]}]}